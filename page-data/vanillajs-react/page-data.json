{"componentChunkName":"component---src-templates-blog-post-js","path":"/vanillajs-react/","result":{"data":{"site":{"siteMetadata":{"title":"Abel L. Mbula"}},"markdownRemark":{"id":"b69d8a21-60fa-557d-bff9-2240c3199c18","excerpt":"You know vanilla JavaScript like no one in the world, and you are so confident that you can do whatever you want on the DOM with only pure JS. No need of a…","html":"<p>You know vanilla JavaScript like no one in the world, and you are so confident that you can do whatever you want on the DOM with only pure JS. No need of a framework or a library. Yeah?</p>\n<p>Let’s do a tour and see if your “commitment” of JS world will still be the same. In this tutorial, we will display the string <strong>Hello Wolrd</strong> to the UI using both your very loved vanilla JS and React, a new library I want to try when it comes to work with the view (UI).</p>\n<p>Before diving in dept, let’s say something about React.</p>\n<h2>#React: What &#x26; Why</h2>\n<p>What is React? To answer this, let’s borrow the definition from the official site</p>\n<blockquote>\n<p>[React is] a JavaScript library for building user interfaces —<em>reactjs.org</em></p>\n</blockquote>\n<p>That is it. React is what it claims to be, the <strong>view (V)</strong> in a MVC architecture. It helps manage UIs (User Interface) in a efficient way.</p>\n<p>It’s OK. But is React worth of learning? You can ask. This question takes me to the <em>Why</em> section.</p>\n<p>There are many reasons out there for why you might give React a try. Let’s discuss some of them that I find important. </p>\n<p>When it comes to building app you need the right tools to do the right job. </p>\n<ul>\n<li>If you’re working on front end stuffs in this modern Web, React is right for you. It is fast (thanks to its virtual DOM). </li>\n<li>If you are looking for a way to gain in performance for your apps, you should give React a try. It is easy to learn and integrate to an existing app. </li>\n<li>If you are thinking of the learning curve how to migrate your existing code base, know that React was built in a way that it can be easy to introduce it in existing Facebook app. </li>\n<li>React is so popular. It is backed by Facebook (I am not paid by them :)) and adopted by many tech giants (Instagram, Dropbox). </li>\n<li>If you’re looking for front-end jobs, Reack skill is a must-have. </li>\n</ul>\n<p>Are you a bit conviced? If so, let’s now start our tour.</p>\n<h2>#Displaying “Hello World” on the DOM</h2>\n<p>We are not going to build something big today. We only want to display the traditional “Hello world” starting with how you do it in vanilla JS and how you can do it now in React.</p>\n<h3>The vanilla JS way</h3>\n<p>I can’t teach you anything here, you are the JS ninja. :)</p>\n<p>Let’s create a simple <code class=\"language-text\">div</code> in <code class=\"language-text\">HTML</code> and use JS to append <code class=\"language-text\">Hello World</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- JS goes here --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> rootElt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        childElt<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n        childElt<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">'container'</span><span class=\"token punctuation\">;</span>\n        rootElt<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childElt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Nothing tricky here. To create a simple UI in JS, you simply need a place where you are going to append your generated DOM. We access our <code class=\"language-text\">div</code> element and create a <code class=\"language-text\">sub-div</code> of <code class=\"language-text\">container</code> <code class=\"language-text\">class</code> and <code class=\"language-text\">Hello World</code> string. At the end, we append the newly created <code class=\"language-text\">div</code> to the the existing <code class=\"language-text\">div</code> (<code class=\"language-text\">root div</code>).</p>\n<p>You can view the UI live on codepen\n<a href=\"https://codepen.io/bam92/pen/xxGedoz\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/bam92/embed/preview/xxGedoz/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>Now is the time to try React.</p>\n<h3>The React way</h3>\n<p>React and its realated tools are <code class=\"language-text\">npm</code> packages. It means that you need a <code class=\"language-text\">CLI</code> (command line interface) tool to work with it. But for sake of simplicity, we’ll use a service called <code class=\"language-text\">unpackage.com</code>. This service is a CDN (content delivery network) for everything on <code class=\"language-text\">npmjs.com</code>. It will provide us with a file of the package we need, that we’ll later add on our page in a script tag.</p>\n<p>To work with React we need two packages:</p>\n<ul>\n<li><code class=\"language-text\">react</code>: responsible for creating React elements,</li>\n<li><code class=\"language-text\">react-dom</code>: responsible for rendering of created elements on the page</li>\n</ul>\n<p>Let’s use the same code as above and modify where it is necessary.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- JS goes here --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@^16/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@^16/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> rootElt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// childElt.textContent = 'Hello World';</span>\n        <span class=\"token comment\">// childElt.className = 'container';</span>\n        <span class=\"token comment\">// rootElt.appendChild(childElt);</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We first add the two scripts we want in order to effectivelly use React.</p>\n<p>As you can see here, we don’t directly make use of the <code class=\"language-text\">createElement</code> API but <code class=\"language-text\">React.createElement()</code>. Here is how it works.</p>\n<p>The <code class=\"language-text\">React.createElement</code> has three parametors of which the last two are optional.</p>\n<p>The first parametor is the <code class=\"language-text\">type</code>of element we want to create, in our case a <code class=\"language-text\">&lt;div&gt;</code> tag. But it can also be any valid <code class=\"language-text\">HTML</code> tag or a React component.</p>\n<p>The second parametor is an object containing properties (aka ‘props’ in React terms) that get passed to the component. We’ll be using it in a while.</p>\n<p>The last argument is the children of the component. This can be a string as in our example or a reference to another component.</p>\n<p>Now that we have our element created, we can render it to the page using <code class=\"language-text\">ReactDOM.render()</code>. It takes two parametors. The first one is what we want to render (<code class=\"language-text\">childElt</code> in our case), and the last on is the target DOM node to render things into (<code class=\"language-text\">rootElt</code> here). </p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- ... --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> rootElt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// childElt.textContent = 'Hello World';</span>\n        <span class=\"token comment\">// childElt.className = 'container';</span>\n        <span class=\"token comment\">// rootElt.appendChild(childElt);</span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElt<span class=\"token punctuation\">,</span> rootElt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The final code looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!-- JS goes here --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@^16/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@^16/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> rootElt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// childElt.textContent = 'Hello World';</span>\n        <span class=\"token comment\">// childElt.className = 'container';</span>\n        <span class=\"token comment\">// rootElt.appendChild(childElt);</span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElt<span class=\"token punctuation\">,</span> rootElt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We have <code class=\"language-text\">Hello World</code> displayed on the page just as in vanilla JS. But there is one more thing we need to do to get the exact same thing as in vanilla JS. Our created element must be of <code class=\"language-text\">class</code> <code class=\"language-text\">container</code>. Let’s refactor our code.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token comment\">&lt;!-- ... --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            children<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">,</span>\n            className<span class=\"token punctuation\">:</span> <span class=\"token string\">'container'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// childElt.textContent = 'Hello World';</span>\n        <span class=\"token comment\">// childElt.className = 'container';</span>\n        <span class=\"token comment\">// rootElt.appendChild(childElt);</span>\n        ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElt<span class=\"token punctuation\">,</span> rootElt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>What you can notice here is that we no longer use the last argument in stead, we have props object as our second argument with the children and the class name. We can omit the <code class=\"language-text\">children</code> prop and add its value as the third argument:</p>\n<p><code class=\"language-text\">const childElt = React.createElement(&#39;div&#39;, { className: &#39;container&#39; }, &#39;Hello World&#39;)</code></p>\n<p>We have fixed everything to reflect the initial project. You can view it on codepen</p>\n<p><a href=\"https://codepen.io/bam92/pen/vYOMogy\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/bam92/embed/preview/vYOMogy/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<p>Let’s move to the next level in our React journey: <code class=\"language-text\">JSX</code> syntax.</p>\n<h2>#Write React code like a pro: use JSX syntax</h2>\n<p><code class=\"language-text\">JSX</code> stands for <code class=\"language-text\">JavaScript + XML</code>. It is written like this <code class=\"language-text\">const divElt = &lt;div&gt;Hello World&lt;/div&gt;;</code>. Don’t think of it as <code class=\"language-text\">HTML</code> but as a kind of template language with the full power of JavaScript.</p>\n<p>With this new syntax, React has ‘broken’ the traditional rules of building web sites/app such as separation of technologies: markup (HTML), style (css), behaviour (JS). This new syntax makes it easy to develop app.</p>\n<p>When using <code class=\"language-text\">JSX</code> notice that under the hood it calls <code class=\"language-text\">React.createElement()</code>. It is not mandatory to use <code class=\"language-text\">JSX</code> when writing React code, you can use only <code class=\"language-text\">React.createElement()</code>. But <code class=\"language-text\">JSX</code> is a recomandation and massivilly adopted by the community. </p>\n<p>Time for practice.</p>\n<p>Before starting to write our new code there is a notice for your. <code class=\"language-text\">JSX</code> is not a regualar JS, no. As consequence, a browser cannot execute JS files that contain JSX code. </p>\n<p>To be able to execute JSX code we need a to transpile it using <code class=\"language-text\">Babel</code></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- JS goes here --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/@babel/standalone@7.9.4/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- Got this from Babel doc: https://babeljs.io/docs/en/babel-standalone --></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> <span class=\"token comment\">// Add this: type=\"text/babel\"</span>\n<span class=\"token comment\">// code ...</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We add the script the will be in charge of transforming JSX into plain JS. Also the wrapper script for our JSX code is defined as type of <code class=\"language-text\">text/babel</code> not the traditional <code class=\"language-text\">text/javascript</code>.</p>\n<p>We can now write our JSX code</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> <span class=\"token comment\">// Add this: type=\"text/babel\"</span>\n\n    <span class=\"token comment\">// create element</span>\n    <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>Hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n    <span class=\"token comment\">// and render it </span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElt<span class=\"token punctuation\">,</span> rootElt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The only thing that change here is the way we create our <code class=\"language-text\">childElt</code>. See the full code:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- JS goes here --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@^16/umd/react.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react-dom@^16/umd/react-dom.development.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/@babel/standalone@7.9.4/babel.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span> \n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/babel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> \n    <span class=\"token keyword\">const</span> rootElt <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> childElt <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>Hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElt<span class=\"token punctuation\">,</span> rootElt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Concise and cool, no?</p>\n<p>See the output on codepen</p>\n<p><a href=\"https://codepen.io/bam92/pen/oNXRvgw\"><div><iframe \n        height='400' \n        scrolling='no' \n        src='//codepen.io/bam92/embed/preview/oNXRvgw/?height=400&theme-id=dark&default-tab=html,result' \n        frameborder='no' \n        allowtransparency='true' \n        allowfullscreen='true' \n        style='width: 100%;'></iframe></div></a></p>\n<h2>Conclusion</h2>\n<p>In this tutorial we tried to get started with React by building a simple UI that says <code class=\"language-text\">Hell World</code>. We used both <code class=\"language-text\">React.createElement()</code> and <code class=\"language-text\">JSX</code> syntax coupled with <code class=\"language-text\">React.render()</code>. I think this gives a taste of React.</p>\n<p>Tell me if you’ll go for React or not yet.</p>","frontmatter":{"title":"From vanilla JS to React - Migrate with Easy","date":"April 01, 2020","description":"How to display 'Hello World' on the UI using React library"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/vanillajs-react/","previous":{"fields":{"slug":"/sum-array/"},"frontmatter":{"title":"How to Get the Sum of an Array in JavaScript"}},"next":{"fields":{"slug":"/must-know-var-let-const/"},"frontmatter":{"title":"Five Things you Should Know (by Heart) about var, let, and const in JavaScript"}}}}}