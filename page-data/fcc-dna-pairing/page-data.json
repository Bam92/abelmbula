{"componentChunkName":"component---src-templates-blog-post-js","path":"/fcc-dna-pairing/","result":{"data":{"site":{"siteMetadata":{"title":"Abel L. Mbula"}},"markdownRemark":{"id":"15bd9db2-de33-53f8-97ce-05430a34a982","excerpt":"Computer Science is awesome and amazing, trust me! There is always more than one way to come to a solution to a given problem in most cases. In this tutorial…","html":"<p>Computer Science is awesome and amazing, trust me! There is always more than one way to come to a solution to a given problem in most cases.</p>\n<p>In this tutorial, we will learn how to solve the <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting/dna-pairing\">Free Code Camp <strong>DNA Pairing Challenge</strong></a> in five different ways.</p>\n<h2>Algorithm Challenge</h2>\n<blockquote>\n<p>The DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.\nBase pairs are a pair of AT and CG. Match the missing element to the provided character.\nReturn the provided character as the first element in each array.\nFor example, for the input GCG, return [[“G”, “C”], [“C”,“G”],[“G”, “C”]]\nThe character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Provided Test Cases</h2>\n<ul>\n<li><strong><em>pairElement(“ATCGA”)</em></strong> should return [[“A”,“T”],[“T”,“A”],[“C”,“G”],[“G”,“C”],[“A”,“T”]]</li>\n<li><strong><em>pairElement(“TTGAG”)</em></strong> should return [[“T”,“A”],[“T”,“A”],[“G”,“C”],[“A”,“T”],[“G”,“C”]]</li>\n<li><strong><em>pairElement(“CTCTA”)</em></strong> should return [[“C”,“G”],[“T”,“A”],[“C”,“G”],[“T”,“A”],[“A”,“T”]]</li>\n</ul>\n<h2>Understanding the Problem</h2>\n<p>As you may have read in the challenge description above, the goal of this exercise is to return the missing trand into a 2d array.\nIn biology class, we learned about DNA base pairs (need a refresher? <a href=\"https://en.wikipedia.org/wiki/Base_pair\">Wikipedia</a> is your friend). They are A - T and C - G, and they go both ways. So every time we have:</p>\n<ul>\n<li><strong>A</strong> string we return an array [‘A’, ‘T’]</li>\n<li><strong>T</strong> string we return an array [‘T’, ‘A’]</li>\n<li><strong>C</strong> string we return an array [‘C’, ‘G’]</li>\n<li><strong>G</strong> string we return an array [‘G’, ‘C’]</li>\n</ul>\n<h2>1. Using For Loop, and If Statement</h2>\n<p>For this solution, we will loop over the parameter passed to the function and use if statement to return the correct pair.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Step 1. Declare the variable of type array that will encapsulate other paired arrays</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Step 2. Create the FOR loop with initializer less then str.length</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Step 3. Use if statement to evaluate baise pair and push it to arrDNA</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/* Here \"GCG\"'s length equals 3\n      For each iteration: i = 0 and arrDNA = [[str[i], 'corresponding pair']]\n      First iteration:  i = 0        arrDNA = [['G', 'C']]\n      Second iteration: i = 1        arrDNA = [['G', 'C'], ['C', 'G']] \n      Third iteration:  i = 2        arrDNA = [['G', 'C'], ['C', 'G'], ['G', 'C']]         \n\n    End of the FOR Loop*/</span>\n\n  <span class=\"token comment\">// Step 4. Return the 2D array</span>\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Without comments:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span> arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>2. Using For Loop, CharAt(), and If Statement</h2>\n<p>In this solution, we will make use of the traditional for loop and if statements once more in combination with the String object’s charAt() method. This method (<strong>String.prototype.charAt()</strong>) returns the character at the specified index in a string.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Step 1. Create an empty array that will encapsulate other paired arrays</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Step 2. Iterate through the str with a FOR loop </span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Step 3. Use if statement to evaluate base pair and push it to arrDNA</span>\n    \n    <span class=\"token comment\">// If the current str character is X create an array of current str with its corresponding pair and push the array to arrDNA</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// if A</span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...push [A - T]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// if T </span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//...push [T - A]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// if C</span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...push [C - G]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// if G</span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...push [G - C]</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Step 4. Return the 2D array</span>\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Without Comments:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span> \n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">)</span> \n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> \n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chartAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span> \n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>3. Using For…of</h2>\n<p>The <code class=\"language-text\">for...of</code> creates a loop iterating over iterable objects (built-in String, Array, Array-like objects).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Step 1. Create an empty array that will encapsulate other paired arrays</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Step 2. Create an object of base pair</span>\n  <span class=\"token keyword\">const</span> basePair <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'T'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'G'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Step 3. Iterate through the str with a for of loop </span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> letter <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Step 4. Create an array of letter with its corresponding pair and  push to arrDNA</span>\n    arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">,</span> basePair<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// Step 5. Return the 2D array</span>\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Without Comments:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> basePair <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'T'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'G'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> letter <span class=\"token keyword\">of</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">,</span> basePair<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>4. Using Split and Map</h2>\n<p>Let’s try to resolve using <code class=\"language-text\">String.prototype.split()</code> and <code class=\"language-text\">Array.prototype.map()</code>. The first method (<code class=\"language-text\">split()</code>) is used to convert a string into an array. The <code class=\"language-text\">map()</code> method creates a new array with the results of calling a function for every array element.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Step 1. Create an object of base pair</span>\n  <span class=\"token keyword\">const</span> basePair <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'T'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'G'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span>\n  <span class=\"token punctuation\">}</span>\n   <span class=\"token comment\">// Step 2. convert the str into an array with split and store the result into arrStr variable</span>\n  <span class=\"token keyword\">const</span> arrStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Step 3. Map through the arrStr and return an array of current value and it baise\n  Keep the result of mapping under arrDNA variable\n  */</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> arrStr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">,</span> basePair<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token comment\">// Step 4. Return the 2D array</span>\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Without Comments:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> basePair <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'T'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'G'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> arrStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> arrStr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">,</span> basePair<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>or even better use <code class=\"language-text\">split()</code> <code class=\"language-text\">map()</code> in one line</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> basePair <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'T'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'G'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'C'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">,</span> basePair<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>5. Using Split, ForEach, and Switch</h2>\n<p>In this solution will take help of <code class=\"language-text\">split()</code>, <code class=\"language-text\">forEach()</code>, and <code class=\"language-text\">switch</code>. we have already discussed <code class=\"language-text\">split()</code> in another solution above. Let talk a bit about the remaining two:</p>\n<ul>\n<li><code class=\"language-text\">array.forEach()</code>: this method executes a provided function once for each array element</li>\n<li><code class=\"language-text\">switch</code>: is similar to <code class=\"language-text\">if</code>, it gives a more descriptive way to compare a value with multiple variants.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n <span class=\"token comment\">// Step 1. Create an empty array that will encapsulate other paired arrays</span>\n  <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token comment\">// Step 2. convert the str into an array with split and store the result into arrStr variable</span>\n <span class=\"token keyword\">const</span> arrStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">// Step 3. Loop through arrStr using forEach</span>\n  arrStr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Step 4. Use switch statement to test x and push the corresponding array to arrDNA */</span>\n   <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// in case x = G</span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...push [\"G\",\"C\"] to arrDNA</span>\n      <span class=\"token keyword\">break</span> <span class=\"token comment\">// break tells the script to run from the case where the criterion is met      </span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span>   \n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>        \n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"T\"</span><span class=\"token punctuation\">:</span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>       \n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span>\n      arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>       \n   <span class=\"token punctuation\">}</span>    \n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Step 5. Return the 2D array</span>\n <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Without Comments:</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">function</span> <span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n   <span class=\"token keyword\">const</span> arrDNA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">const</span> arrStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   arrStr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">:</span> \n       arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span>       \n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span>   \n       arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"G\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>        \n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"T\"</span><span class=\"token punctuation\">:</span>\n       arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>       \n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span>\n       arrDNA<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"T\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>       \n    <span class=\"token punctuation\">}</span>    \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> arrDNA<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">pairElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GCG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Wrap up</h2>\n<p>That is it for this tutorial. We have used five different ways to solve the DNA Pairing challenge that is available on FreeCodeCamp.</p>\n<p>Which of these solutions is fine for you? Do you have any other solutions? Share with us. Among all these solution if I have to chose just one, I’d go for the 3rd one that makes use of <code class=\"language-text\">for...of</code>.</p>","frontmatter":{"title":"Five Ways to Solve the DNA Pairing Challenge in JavaScript","date":"December 30, 2019","description":"Step by step guide on how to solve the FCC DNA Pairing Challenge in five different ways"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/fcc-dna-pairing/","previous":{"fields":{"slug":"/nano-setup/"},"frontmatter":{"title":"How to configure the Nano Text Editor on GNU/Linux"}},"next":{"fields":{"slug":"/hex-rgb-convertor/"},"frontmatter":{"title":"Create a Hex to RGB Convertor App with HTML, CSS, and JavaScript (1/2)"}}}}}