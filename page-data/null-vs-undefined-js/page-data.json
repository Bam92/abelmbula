{"componentChunkName":"component---src-templates-blog-post-js","path":"/null-vs-undefined-js/","result":{"data":{"site":{"siteMetadata":{"title":"Abel L. Mbula"}},"markdownRemark":{"id":"5b28acc6-6b35-559f-8866-5b82be701590","excerpt":"When you come across  and  you might be tempted to think that they are just synonym. In this tutorial you’ll discover that they are not. Let’s go. Null It…","html":"<p>When you come across <code class=\"language-text\">null</code> and <code class=\"language-text\">undefined</code> you might be tempted to think that they are just synonym. In this tutorial you’ll discover that they are not. Let’s go.</p>\n<h2>Null</h2>\n<p>It represents an empty or non-existant value and it must be assigned.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myVar <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// assign null to myVar</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows null</span></code></pre></div>\n<p>In the example above, our variable (<code class=\"language-text\">myVar</code>) has been set to <code class=\"language-text\">null</code> and shows <code class=\"language-text\">null</code> in the console.  </p>\n<p>The <code class=\"language-text\">typeof</code> <code class=\"language-text\">null</code> is  <code class=\"language-text\">object</code> (though this is an implementation error since the very beginning of JavaScript)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows object</span></code></pre></div>\n<h2>Undefined</h2>\n<p>It means that a variable exists (is declared) but  has not yet assigned a value.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myVar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// declaration of the var</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows undefined</span></code></pre></div>\n<p>You can also explicitly assign <code class=\"language-text\">undefined</code> to a variable like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myVar <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows undefined</span></code></pre></div>\n<p>If you try to look up a non-existing properties in an object, JavaScript will send you <code class=\"language-text\">undefined</code> too: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Sarah'</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows undefined</span></code></pre></div>\n<p>Same if you don’t have an explicit return in a function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myFun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">myFunr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows undefined</span></code></pre></div>\n<p>Finally, the type of <code class=\"language-text\">undefined</code> is <code class=\"language-text\">undefined</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myVar<span class=\"token punctuation\">;</span> <span class=\"token comment\">// declaration of the var</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> myVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// shows undefined</span></code></pre></div>\n<h2>Conclusion</h2>\n<p><code class=\"language-text\">null</code> is a value that represents no value whereas <code class=\"language-text\">undefined</code> is the default value for a variable that  has not been assigned a specific value, or a function that has no explicit return value, or non-existing properties in an object.</p>\n<p>Thank you for reading!</p>","frontmatter":{"title":"Understanding JavaScript: Null vs Undefined","date":"January 03, 2020","description":"Do you think they are the same? Follow me in this tutorial and you'll see that they are different"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/null-vs-undefined-js/","previous":{"fields":{"slug":"/soft-vs-hard-equality/"},"frontmatter":{"title":"Understanding JS: Soft (==) vs Hard Equality (===)"}},"next":{"fields":{"slug":"/sum-array/"},"frontmatter":{"title":"How to Get the Sum of an Array in JavaScript"}}}}}