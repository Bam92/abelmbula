{"componentChunkName":"component---src-templates-blog-post-js","path":"/bubble-sort copy/","result":{"data":{"site":{"siteMetadata":{"title":"Abel L. Mbula"}},"markdownRemark":{"id":"ba419581-5e19-5fcd-a295-fa2f237a3ed9","excerpt":"As some of you know, I am runnig a challenge that consists of writing a blog post everyday (plus other activities) for the next 100 days. For today (day 4 / 10…","html":"<p>As some of you know, I am runnig a <a href=\"https://twitter.com/abelmbula/status/1260575365162041350\">challenge</a> that consists of writing a blog post everyday (plus other activities) for the next 100 days.</p>\n<p>For today (day 4 / 100), I want to share with you about <strong>Bubble Sort Algorithm</strong> and how to implement it in JavaScript language.</p>\n<p>Let’s go!</p>\n<h2>A little Words about Bubble Sort</h2>\n<p>What does Wikipedia say about it?</p>\n<blockquote>\n<p>is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.</p>\n</blockquote>\n<p>Simply speaking, Bubble Sort compares all the element one by one and sort them based on their values.</p>\n<p>For example, given a list of integers that is to sort in ascending order. Using Bubble Sort, we begin by comparing the first item of the list with the next one; if the first item is greater than the second one, we swap both of them. We will then compare the second item with the third one and continue like this until we reach the last item.</p>\n<h2>Implementation</h2>\n<p>Let’s consider a sample array with the expected output.</p>\n<ul>\n<li>array: <code class=\"language-text\">[4, 3, 5, 9, 1]</code></li>\n<li>output: <code class=\"language-text\">[1, 3, 4, 5, 9]</code></li>\n</ul>\n<p>Here is how bubble sort will sort this sample array step by step. Items in <strong>bold</strong> are those that are being compared.</p>\n<p><strong>First iteration</strong>:</p>\n<p>[<strong>4</strong>, <strong>3</strong>, 5, 9, 1] —> [3, 4, 5, 9, 1], 4 > 3 so swap</p>\n<p>[3, <strong>4</strong>, <strong>5</strong>, 9, 1] —> [3, 4, 5, 9, 1], 4 &#x3C; 5 so no swapping</p>\n<p>[3, 4, <strong>5</strong>, <strong>9</strong>, 1] —> [3, 4, 5, 9, 1], 5 &#x3C; 9 so no swapping</p>\n<p>[3, 4, 5, <strong>9</strong>, <strong>1</strong>] —> [3, 4, 5, 1, 9], 9 &#x3C; 1 so swap</p>\n<p><strong>Second iteration</strong></p>\n<p>[<strong>3</strong>, <strong>4</strong>, 5, 1, 9] —> [3, 4, 5, 1, 9], 3 &#x3C; 4 so no swapping</p>\n<p>[3, <strong>4</strong>, <strong>5</strong>, 1, 9] —> [3, 4, 5, 1, 9], 4 &#x3C; 5 so no swapping</p>\n<p>[3, 4, <strong>5</strong>, <strong>1</strong>, 9] —> [3, 4, 1, 5, 9], 5 > 1 so swap</p>\n<p>[3, 4, 1, <strong>5</strong>, <strong>9</strong>] —> [3, 4, 1, 5, 9], 5 &#x3C; 9 so no swapping</p>\n<p><strong>Third iteration</strong></p>\n<p>[<strong>3</strong>, <strong>4</strong>, 1, 5, 9] —> [3, 4, 1, 5, 9], 3 &#x3C; 4 so no swapping</p>\n<p>[3, <strong>4</strong>, <strong>1</strong>, 5, 9] —> [3, 1, 4, 5, 9], 4 > 1 so swap</p>\n<p>[3, 1, <strong>4</strong>, <strong>5</strong>, 9] —> [3, 1, 4, 5, 9], 4 &#x3C; 5 so no swapping</p>\n<p>[3, 1, 4, <strong>5</strong>, <strong>9</strong>] —> [3, 1, 4, 5, 9], 5 &#x3C; 9 so no swapping</p>\n<p><strong>Fourth iteration</strong></p>\n<p>[<strong>3</strong>, <strong>1</strong>, 4, 5, 9] —> [1, 3, 4, 5, 9], 3 > 1 so swap</p>\n<p>[1, <strong>3</strong>, <strong>4</strong>, 5, 9] —> [1, 3, 4, 5, 9], 3 &#x3C; 4 so no swapping</p>\n<p>[1, 3, <strong>4</strong>, <strong>5</strong>, 9] —> [1, 3, 4, 5, 9], 4 &#x3C; 5 so no swapping</p>\n<p>[1, 3, 4, <strong>5</strong>, <strong>9</strong>] —> [1, 3, 4, 5, 9], 5 &#x3C; 9 so no swapping</p>\n<p><strong>Fifth iteration</strong></p>\n<p>[<strong>1</strong>, <strong>3</strong>, 4, 5, 9] —> [1, 3, 4, 5, 9], 1 &#x3C; 3 so no swapping</p>\n<p>[1, <strong>3</strong>, <strong>4</strong>, 5, 9] —> [1, 3, 4, 5, 9], 3 &#x3C; 4 so no swapping</p>\n<p>[1, 3, <strong>4</strong>, <strong>5</strong>, 9] —> [1, 3, 4, 5, 9], 4 &#x3C; 5 so no swapping</p>\n<p>[1, 3, 4, <strong>5</strong>, <strong>9</strong>] —> [1, 3, 4, 5, 9], 5 &#x3C; 9 so no swapping</p>\n<p>As you can see in the 4th iteration the array is already sorted, but the algorithm does not know if it is complete. The algorithm needs one <strong>whole</strong> pass without any <strong>swap</strong> to know it is sorted, reason why you see 5th iteration.</p>\n<h3>Pseudocode</h3>\n<p>I always see it a good way to write my thinking of an algorithm in plain English before writing it in a real programming language. This is what I call the pseudocode notation (I think. Tell me if I am wrong)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function bubbleSort(arr)\nSet isSwapped to true\nWHILE isSwapped = true\n    Reset isSwapped to false\n    FOR each item in the arr\n        IF current item &gt; next item\n            swap items\n            Reset isSwapped to true\n        ENDIF\n    ENDFOR\nENDWHILE\nRETURN arr</code></pre></div>\n<p>I am not an expert in pseudocoding, but I am totally sure that even grandma may understand this.</p>\n<p>Let’s translate our pseudocode into JavaScript.</p>\n<h3>Bubble Sort in JavaScript</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> isSwapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>isSwapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isSwapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item\n        isSwapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> arr\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing tricky here. I use a <code class=\"language-text\">while</code> loop and prefer <code class=\"language-text\">forEach</code> to iterate over the passed array.</p>\n<h2>Complexity Analysis</h2>\n<p>To end our journey, let me say a just one word about the performance of this algorithm.</p>\n<p>Bubble sort is a very simple sorting algorithm but it is too slow. You’ll almost never find or use it in real world. It is mostly used for education purpose.</p>\n<ul>\n<li>Worst Case Time Complexity, aka <code class=\"language-text\">Big-O</code>: <code class=\"language-text\">O(n^2)</code></li>\n<li>Best Case Time Complexity, aka <code class=\"language-text\">Big-omega</code>: <code class=\"language-text\">O(n)</code></li>\n<li>Average Time Complexity, aka <code class=\"language-text\">Big-theta</code>: <code class=\"language-text\">O(n^2)</code></li>\n<li>Space Complexity: <code class=\"language-text\">O(1)</code></li>\n</ul>\n<p>Note that I did not reinvent the wheel, references are there (see down)</p>\n<h2>References</h2>\n<ol>\n<li><a href=\"https://www.studytonight.com/data-structures/bubble-sort\">Bubble Sort Algorithm</a>, studytonight.com</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">Bubble sort</a>, Wikipedia</li>\n<li><a href=\"https://medium.com/javascript-algorithms/javascript-algorithms-bubble-sort-3d27f285c3b2\">Javascript Algorithms — Bubble Sort</a>, medium.com</li>\n</ol>","frontmatter":{"title":"How to Implement Bubble Sort Algorithm in JavaScript","date":"May 17, 2020","description":"A quick introduction on bubble sort algorithm"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/bubble-sort copy/","previous":{"fields":{"slug":"/export-import-chrome/"},"frontmatter":{"title":"How to Export/Import Browser Data from One Computer to an other with Chrom(ium)"}},"next":{"fields":{"slug":"/bubble-sort/"},"frontmatter":{"title":"How to Implement Bubble Sort Algorithm in JavaScript"}}}}}