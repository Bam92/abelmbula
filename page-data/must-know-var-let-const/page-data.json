{"componentChunkName":"component---src-templates-blog-post-js","path":"/must-know-var-let-const/","result":{"data":{"site":{"siteMetadata":{"title":"Abel L. Mbula"}},"markdownRemark":{"id":"555eb53d-955b-5d44-918d-9e9bab61f54b","excerpt":"Today, I want to refresh our memory with some basic notions about , , and ; the keywords we use almost every day when we are coding our software in JavaScript…","html":"<p>Today, I want to refresh our memory with some basic notions about <code class=\"language-text\">var</code>, <code class=\"language-text\">let</code>, and <code class=\"language-text\">const</code>; the keywords we use almost every day when we are coding our software in JavaScript.</p>\n<h2>-1- They are all used to create bindings, aka variables</h2>\n<p>Do you remember those things that help us catch and hold values? We use these three words for that purpose, but they don’t all mean the same thing.</p>\n<ul>\n<li><code class=\"language-text\">var</code> (short for “variable”): old-fashioned, this is the way we used to do in pre-2015 JavaScript</li>\n<li><code class=\"language-text\">const</code> (short for “constant”): the modern way of creating bindings. </li>\n<li><code class=\"language-text\">let</code>: modern way too</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Sarah\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hello Sarah</span>\n\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You're \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// You're 1</span></code></pre></div>\n<h2>-2- Only var is global scope</h2>\n<p>Just to recall you, the visibility and lifetime of a given variable is determined by its scope. As such, a variable is not visible/accessible outside the scope in which it is declared.</p>\n<p>A variable has global scope if it is declared outside a function, block… scope. It can be accessed from everywhere in your program.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">userScore <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> userScore<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>-3- They are all function scope</h2>\n<p>This means that you cannot access them outside the function.</p>\n<p>Let’s try to access var out of the function <code class=\"language-text\">doSomething()</code>…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> someVar <span class=\"token operator\">=</span> <span class=\"token string\">\"Something\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someVar<span class=\"token punctuation\">)</span></code></pre></div>\n<p>… if you run this code, you’ll get a <code class=\"language-text\">ReferenceError</code> saying that <code class=\"language-text\">x is not defined</code>.</p>\n<p>You’ll get the same thing if you try to replace <code class=\"language-text\">var</code> by <code class=\"language-text\">let</code> or <code class=\"language-text\">const</code>.</p>\n<h2>-4- Only const and let are block scope</h2>\n<p>The block scope is defined with curly braces (<code class=\"language-text\">{}</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">listFruits</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fruit1 <span class=\"token operator\">=</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//it exists in block scope</span>\n        <span class=\"token keyword\">let</span> fruit2 <span class=\"token operator\">=</span> <span class=\"token string\">\"avocado\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//it exists in block scope</span>\n        <span class=\"token keyword\">var</span> fruit3 <span class=\"token operator\">=</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// it exists in function scope</span>\n    <span class=\"token punctuation\">}</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruit3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">listFruits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//===result:</span>\n<span class=\"token comment\">//error: fruit1 is not defined</span>\n<span class=\"token comment\">//error: fruit2 is not defined</span>\n<span class=\"token comment\">// banana</span></code></pre></div>\n<p>As you can see in the code above, only <code class=\"language-text\">fruit3</code> is accessed; because <code class=\"language-text\">var</code> does not have block scope.   </p>\n<h2>-5- let and var can be reassigned but const</h2>\n<p><code class=\"language-text\">const</code> is still unique as long as the program lives. <code class=\"language-text\">var</code> and <code class=\"language-text\">let</code> can be reassigned as much as needed.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Sarah\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hello Sarah</span>\n\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// if we try to set again greeting, we get an error</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'greeting' has already been declared</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Patience\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Hello Patience</span>\n\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You're \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// You're 1</span>\n\n<span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// we reset the age but no error</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You're \"</span> <span class=\"token operator\">+</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// You're 5</span></code></pre></div>","frontmatter":{"title":"Five Things you Should Know (by Heart) about var, let, and const in JavaScript","date":"May 14, 2020","description":"A simple recal about var, let, and const JS key-word "}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/must-know-var-let-const/","previous":{"fields":{"slug":"/vanillajs-react/"},"frontmatter":{"title":"From vanilla JS to React - Migrate with Easy"}},"next":{"fields":{"slug":"/export-import-chrome/"},"frontmatter":{"title":"How to Export/Import Browser Data from One Computer to an other with Chrom(ium)"}}}}}